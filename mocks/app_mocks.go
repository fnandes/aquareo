// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	aquareo "github.com/pedrobfernandes/aquareo/internal/aquareo"
)

// MockConfigurer is a mock of Configurer interface.
type MockConfigurer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurerMockRecorder
}

// MockConfigurerMockRecorder is the mock recorder for MockConfigurer.
type MockConfigurerMockRecorder struct {
	mock *MockConfigurer
}

// NewMockConfigurer creates a new mock instance.
func NewMockConfigurer(ctrl *gomock.Controller) *MockConfigurer {
	mock := &MockConfigurer{ctrl: ctrl}
	mock.recorder = &MockConfigurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurer) EXPECT() *MockConfigurerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConfigurer) Get() (aquareo.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(aquareo.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigurerMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigurer)(nil).Get))
}

// Save mocks base method.
func (m *MockConfigurer) Save(cfg aquareo.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockConfigurerMockRecorder) Save(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfigurer)(nil).Save), cfg)
}

// MockWebServer is a mock of WebServer interface.
type MockWebServer struct {
	ctrl     *gomock.Controller
	recorder *MockWebServerMockRecorder
}

// MockWebServerMockRecorder is the mock recorder for MockWebServer.
type MockWebServerMockRecorder struct {
	mock *MockWebServer
}

// NewMockWebServer creates a new mock instance.
func NewMockWebServer(ctrl *gomock.Controller) *MockWebServer {
	mock := &MockWebServer{ctrl: ctrl}
	mock.recorder = &MockWebServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebServer) EXPECT() *MockWebServerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockWebServer) Start(addr string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", addr)
}

// Start indicates an expected call of Start.
func (mr *MockWebServerMockRecorder) Start(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWebServer)(nil).Start), addr)
}

// Stop mocks base method.
func (m *MockWebServer) Stop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", ctx)
}

// Stop indicates an expected call of Stop.
func (mr *MockWebServerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWebServer)(nil).Stop), ctx)
}

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockController) Config() aquareo.Configurer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(aquareo.Configurer)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockControllerMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockController)(nil).Config))
}

// Store mocks base method.
func (m *MockController) Store() aquareo.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store")
	ret0, _ := ret[0].(aquareo.Store)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockControllerMockRecorder) Store() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockController)(nil).Store))
}

// MockGPIODriver is a mock of GPIODriver interface.
type MockGPIODriver struct {
	ctrl     *gomock.Controller
	recorder *MockGPIODriverMockRecorder
}

// MockGPIODriverMockRecorder is the mock recorder for MockGPIODriver.
type MockGPIODriverMockRecorder struct {
	mock *MockGPIODriver
}

// NewMockGPIODriver creates a new mock instance.
func NewMockGPIODriver(ctrl *gomock.Controller) *MockGPIODriver {
	mock := &MockGPIODriver{ctrl: ctrl}
	mock.recorder = &MockGPIODriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGPIODriver) EXPECT() *MockGPIODriverMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGPIODriver) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGPIODriverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGPIODriver)(nil).Close))
}

// Open mocks base method.
func (m *MockGPIODriver) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockGPIODriverMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockGPIODriver)(nil).Open))
}

// MockSensor is a mock of Sensor interface.
type MockSensor struct {
	ctrl     *gomock.Controller
	recorder *MockSensorMockRecorder
}

// MockSensorMockRecorder is the mock recorder for MockSensor.
type MockSensorMockRecorder struct {
	mock *MockSensor
}

// NewMockSensor creates a new mock instance.
func NewMockSensor(ctrl *gomock.Controller) *MockSensor {
	mock := &MockSensor{ctrl: ctrl}
	mock.recorder = &MockSensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensor) EXPECT() *MockSensorMockRecorder {
	return m.recorder
}

// GetValue mocks base method.
func (m *MockSensor) GetValue() (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockSensorMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockSensor)(nil).GetValue))
}

// MockDataCollector is a mock of DataCollector interface.
type MockDataCollector struct {
	ctrl     *gomock.Controller
	recorder *MockDataCollectorMockRecorder
}

// MockDataCollectorMockRecorder is the mock recorder for MockDataCollector.
type MockDataCollectorMockRecorder struct {
	mock *MockDataCollector
}

// NewMockDataCollector creates a new mock instance.
func NewMockDataCollector(ctrl *gomock.Controller) *MockDataCollector {
	mock := &MockDataCollector{ctrl: ctrl}
	mock.recorder = &MockDataCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataCollector) EXPECT() *MockDataCollectorMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockDataCollector) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockDataCollectorMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDataCollector)(nil).Start))
}

// Stop mocks base method.
func (m *MockDataCollector) Stop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", ctx)
}

// Stop indicates an expected call of Stop.
func (mr *MockDataCollectorMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDataCollector)(nil).Stop), ctx)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ReadAll mocks base method.
func (m *MockStore) ReadAll(bucket string, size int) ([]aquareo.MetricEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", bucket, size)
	ret0, _ := ret[0].([]aquareo.MetricEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockStoreMockRecorder) ReadAll(bucket, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockStore)(nil).ReadAll), bucket, size)
}

// Store mocks base method.
func (m *MockStore) Store(bucket string, entry aquareo.MetricEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", bucket, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockStoreMockRecorder) Store(bucket, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStore)(nil).Store), bucket, entry)
}
